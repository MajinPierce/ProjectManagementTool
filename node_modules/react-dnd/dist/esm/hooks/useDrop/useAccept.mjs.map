{"version":3,"sources":["../../../../src/hooks/useDrop/useAccept.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n"],"names":["invariant","useMemo","useAccept","spec","accept","Array","isArray"],"mappings":"AAAA,MAAM,GAAGA,SAAS,QAAQ,CAAsB;AAEhD,MAAM,GAAGC,OAAO,QAAQ,CAAO;AAG/B,EAIG,AAJH;;;;CAIG,AAJH,EAIG,CACH,MAAM,UAAUC,SAAS,CACxBC,IAAiC,EAClB,CAAC;IAChB,KAAK,CAAC,CAAC,CAACC,MAAM,EAAC,CAAC,GAAGD,IAAI;IACvB,MAAM,CAACF,OAAO,KAAO,CAAC;QACrBD,SAAS,CAACG,IAAI,CAACC,MAAM,IAAI,IAAI,EAAE,CAAwB;QACvD,MAAM,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,IAAIA,MAAM,GAAG,CAACA;YAAAA,MAAM;QAAA,CAAC;IACjD,CAAC,EAAE,CAACA;QAAAA,MAAM;IAAA,CAAC;AACZ,CAAC"}